"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var buttonModule = require("ui/button");
var RockModel_1 = require("./RockModel");
var RockUser = (function () {
    function RockUser(page, id) {
        this.imgUrl = '';
        this.imgUrls = ['~/images/scssors.png', '~/images/rock.png', '~/images/paper.png'];
        this.imgNum = 0;
        this.isWinner = -1;
        this.user = page.getViewById(id);
        this.imgUrl = this.imgUrls[0];
        this.startRolling();
        this.eventsetting();
    }
    RockUser.prototype.eventsetting = function () {
        var _this = this;
        this.user.on(buttonModule.Button.tapEvent, function () {
            clearInterval(_this.timer);
            _this.select();
        });
    };
    RockUser.prototype.select = function () {
        this.user.off(buttonModule.Button.tapEvent);
        var selectedNum = RockModel_1.getSelected();
        var num;
        if (this.isWinner > -1 && selectedNum > -1) {
            num = (selectedNum + (this.isWinner === 1 ? 1 : 2)) % 3;
        }
        else {
            num = Math.floor(Math.random() * this.imgUrls.length);
        }
        this.user.src = this.imgUrls[num];
        RockModel_1.setSelected(num);
    };
    RockUser.prototype.setWinner = function (isWinner) {
        this.isWinner = isWinner;
    };
    RockUser.prototype.startRolling = function () {
        var _this = this;
        this.timer = setInterval(function () {
            _this.imgNum = (_this.imgNum + 1) % 3;
            _this.user.src = _this.imgUrls[_this.imgNum];
            if (_this.imgNum === 2) {
                _this.user.width = '40%';
            }
            else {
                _this.user.width = '35%';
            }
        }, 100);
    };
    RockUser.prototype.reset = function () {
        clearInterval(this.timer);
        this.startRolling();
        this.eventsetting();
    };
    return RockUser;
}());
exports.default = RockUser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm9ja1VzZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJSb2NrVXNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUEyQztBQUMzQyx5Q0FBcUQ7QUFFckQ7SUFTSSxrQkFBWSxJQUFJLEVBQUUsRUFBRTtRQU5aLFdBQU0sR0FBVyxFQUFFLENBQUM7UUFDcEIsWUFBTyxHQUFrQixDQUFDLHNCQUFzQixFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFFN0YsV0FBTSxHQUFXLENBQUMsQ0FBQztRQUNuQixhQUFRLEdBQVcsQ0FBQyxDQUFDLENBQUM7UUFHMUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWpDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCwrQkFBWSxHQUFaO1FBQUEsaUJBS0M7UUFKRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUN2QyxhQUFhLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCx5QkFBTSxHQUFOO1FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QyxJQUFNLFdBQVcsR0FBRyx1QkFBVyxFQUFFLENBQUM7UUFDbEMsSUFBSSxHQUFXLENBQUM7UUFFaEIsRUFBRSxDQUFBLENBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFFLENBQUMsQ0FBQSxDQUFDO1lBQ3pDLEdBQUcsR0FBRyxDQUFDLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyx1QkFBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXJCLENBQUM7SUFFRCw0QkFBUyxHQUFULFVBQVUsUUFBUTtRQUNkLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFFRCwrQkFBWSxHQUFaO1FBQUEsaUJBVUM7UUFURyxJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQztZQUNyQixLQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEMsS0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUMsRUFBRSxDQUFDLENBQUMsS0FBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixLQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDNUIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLEtBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUM1QixDQUFDO1FBQ0wsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1osQ0FBQztJQUVELHdCQUFLLEdBQUw7UUFDRyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUNMLGVBQUM7QUFBRCxDQUFDLEFBN0RELElBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJ1dHRvbk1vZHVsZSA9IHJlcXVpcmUoXCJ1aS9idXR0b25cIik7XG5pbXBvcnQge3NldFNlbGVjdGVkLCBnZXRTZWxlY3RlZH0gZnJvbSAnLi9Sb2NrTW9kZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb2NrVXNlciB7XG5cbiAgICBwcml2YXRlIHVzZXI7XG4gICAgcHJpdmF0ZSBpbWdVcmw6IHN0cmluZyA9ICcnO1xuICAgIHByaXZhdGUgaW1nVXJsczogQXJyYXk8c3RyaW5nPiA9IFsnfi9pbWFnZXMvc2Nzc29ycy5wbmcnLCAnfi9pbWFnZXMvcm9jay5wbmcnLCAnfi9pbWFnZXMvcGFwZXIucG5nJ107XG4gICAgcHJpdmF0ZSB0aW1lcjtcbiAgICBwcml2YXRlIGltZ051bTogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIGlzV2lubmVyOiBudW1iZXIgPSAtMTtcblxuICAgIGNvbnN0cnVjdG9yKHBhZ2UsIGlkKSB7XG4gICAgICAgIHRoaXMudXNlciA9IHBhZ2UuZ2V0Vmlld0J5SWQoaWQpO1xuXG4gICAgICAgIHRoaXMuaW1nVXJsID0gdGhpcy5pbWdVcmxzWzBdO1xuICAgICAgICB0aGlzLnN0YXJ0Um9sbGluZygpO1xuICAgICAgICB0aGlzLmV2ZW50c2V0dGluZygpO1xuICAgIH1cblxuICAgIGV2ZW50c2V0dGluZygpIHtcbiAgICAgICAgdGhpcy51c2VyLm9uKGJ1dHRvbk1vZHVsZS5CdXR0b24udGFwRXZlbnQsICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdCgpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHNlbGVjdCgpIHtcbiAgICAgICAgdGhpcy51c2VyLm9mZihidXR0b25Nb2R1bGUuQnV0dG9uLnRhcEV2ZW50KTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWROdW0gPSBnZXRTZWxlY3RlZCgpO1xuICAgICAgICBsZXQgbnVtOiBudW1iZXI7XG4gICAgICAgIFxuICAgICAgICBpZiggdGhpcy5pc1dpbm5lciA+IC0xICYmIHNlbGVjdGVkTnVtID4gLTEgKXtcbiAgICAgICAgICAgIG51bSA9IChzZWxlY3RlZE51bSArICh0aGlzLmlzV2lubmVyID09PSAxID8gMSA6IDIpKSUzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnVtID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5pbWdVcmxzLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMudXNlci5zcmMgPSB0aGlzLmltZ1VybHNbbnVtXTtcbiAgICAgICAgc2V0U2VsZWN0ZWQobnVtKTtcblxuICAgIH1cblxuICAgIHNldFdpbm5lcihpc1dpbm5lcikge1xuICAgICAgICB0aGlzLmlzV2lubmVyID0gaXNXaW5uZXI7XG4gICAgfVxuXG4gICAgc3RhcnRSb2xsaW5nKCkge1xuICAgICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbWdOdW0gPSAodGhpcy5pbWdOdW0gKyAxKSAlIDM7XG4gICAgICAgICAgICB0aGlzLnVzZXIuc3JjID0gdGhpcy5pbWdVcmxzW3RoaXMuaW1nTnVtXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmltZ051bSA9PT0gMikge1xuICAgICAgICAgICAgICAgIHRoaXMudXNlci53aWR0aCA9ICc0MCUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXIud2lkdGggPSAnMzUlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwKTtcbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgICAgIHRoaXMuc3RhcnRSb2xsaW5nKCk7XG4gICAgICAgdGhpcy5ldmVudHNldHRpbmcoKTtcbiAgICB9XG59Il19